import heapq

def smallestChair(times, targetFriend):
    events = []
    for i, (arr, dep) in enumerate(times):
        events.append((arr, 'arrive', i))
        events.append((dep, 'leave', i))
    

    events.sort(key=lambda x: (x[0], x[1] == 'arrive'))

    available_chairs = []
    occupied_chairs = {}
    next_chair = 0

    for time, event_type, friend in events:
        if event_type == 'arrive':
            if available_chairs:
                chair = heapq.heappop(available_chairs)
            else:
                chair = next_chair
                next_chair += 1
            occupied_chairs[friend] = chair
            if friend == targetFriend:
                return chair
        elif event_type == 'leave':
            chair = occupied_chairs.pop(friend)
            heapq.heappush(available_chairs, chair)
    
    return -1  

print(smallestChair([[1, 4], [2, 3], [4, 6]], 1))  # Output: 1
print(smallestChair([[3, 10], [1, 5], [2, 6]], 0))  # Output: 2
